import numpy as np

# data
X = np.array([[66, 5, 15, 2, 500], 
              [21, 3, 50, 1, 100], 
              [120, 15, 5, 2, 1200]])
y = np.array([250000, 60000, 525000])

# alternative sets of coefficient values
c = np.array([[3000, 200 , -50, 5000, 100], 
              [2000, -250, -100, 150, 250], 
              [3000, -100, -150, 0, 150]])   

def find_best(X, y, c):
    smallest_error = np.Inf
    best_index = -1
    sse_list = []
    for coeff in c:
       calc_y = X @ coeff
       # print(calc_y)
        sse = 0
        for yi, calc_yi in zip(y, calc_y):          # edit here: calculate the sum of squared error with coefficient set coeff and
           sse += (yi - calc_yi)**2                 # keep track of the one yielding the smallest squared error
        sse_list.append(sse)
    best_index = sse_list.index(min(sse_list))
    print("the best set is set %d" % best_index)
    return best_index


find_best(X, y, c)
